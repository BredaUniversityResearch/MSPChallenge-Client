//@Library('CradleSharedLibrary') _ // Loaded implicitly

String Node = ''
String WorkingDir = ''
//Assign a node to run the pipeline
node('WindowsNode') {
    echo "Running on ${env.NODE_NAME} in ${env.WORKSPACE}"
    Node = env.NODE_NAME
    WorkingDir = env.WORKSPACE
}

String commit = ""

stage('Clone') {
    node(Node) {
        git.checkout("https://github.com/BredaUniversityResearch/MSPChallenge-Client", "main", 'CRADLE_WEBMASTER_CREDENTIALS')
        commit = git.fetchCommitHash()
    }
}

stage('Analysis') {
    node(Node) {
        script {
            def msBuild = tool 'Default MSBuild'
            def scanner = tool 'SonarScanner for MSBuild'
            withSonarQubeEnv('SonarQube') {
                bat "\"${scanner}\\SonarScanner.MSBuild.exe\" begin /k:\"MSPChallenge-Client\""
                bat "\"${msBuild}\\MSBuild.exe\" MSPChallenge-Client-SonarQube.sln"
                bat "\"${scanner}\\SonarScanner.MSBuild.exe\" end"
            }
        }
    }
}


stage('Cleanup') {
    node(Node) {
        dir(WorkingDir) {
            script {
                deleteDir()
            }
        }
        cleanWs()
    }
}